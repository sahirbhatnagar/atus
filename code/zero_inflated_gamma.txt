model{
  
  # For the ones trick
  C <- 10000
  
  # for every observation
  for(i in 1:N){
    
    # define the logistic regression model, where w is the probability of occurance.
    # use the logistic transformation exp(z)/(1 + exp(z)), where z is a linear function
    logit(w[i]) <- zeta[i]
    zeta[i] <- gamma0 + gamma1*MPD[i] + gamma2*MTD[i] + gamma3*int[i] + gamma4*MPD[i]*int[i] + gamma5*MTD[i]*int[i]
    
    # define the gamma regression model for the mean. use the log link 
    # to ensure positive, nonzero mu
    # pow(x,z) is the Power function
    mu[i] <- pow(eta[i], 1)
    eta[i] <- alpha_diary[DIARYDAY[i]] + alpha_region[REGION[i]] + alpha_hispanic * HISPANIC[i] + alpha_sex*SEX[i] + alpha_race[RACE[i]] + beta_econ_1 * ECON1[i] + beta_econ_2 * ECON2[i]

    # redefine the mu and sd of the continuous part into the shape and scale parameters
    # shape = mu^2 / var(y), see Faraway pg.149 for details, note what he defines as the scale should
    # actually be the rate lambda. 
    # rate = mu / var(y)
    shape[i] <- pow(mu[i], 2) / pow(sd, 2) 
    rate[i] <- mu[i] / pow(sd, 2)
    
    # for readability, define the log-likelihood of the gamma here
    logGamma[i] <- log(dgamma(y[i], shape[i], rate[i]))
    
    # define the total likelihood, where the likelihood is (1 - w) if y < 0.0001 (z = 0) or
    # the likelihood is w * gammalik if y >= 0.0001 (z = 1). So if z = 1, then the first bit must be
    # 0 and the second bit 1. Use 1 - z, which is 0 if y > 0.0001 and 1 if y < 0.0001
    logLik[i] <- (1 - z[i]) * log(1 - w[i]) + z[i] * ( log(w[i]) + logGamma[i] )
    
    Lik[i] <- exp(logLik[i])
    
    # Use the ones trick
    p[i] <- Lik[i] / C
    ones[i] ~ dbern(p[i])
  }
  
  # PRIORS
    for (i in 1:4) {
      alpha_race ~ dnorm(0.0,0.001)    
    }
    alpha_race[5] <- 0.0

    alpha_sex ~ dnorm(0.0,0.001)

    alpha_hispanic ~ dnorm(0.0,0.001)

    for (i in 1:4) {
    	alpha_region[i] ~ dnorm(0.0,0.001)
    }

    for (i in 1:7) {
    	alpha_diary[i] ~ dnorm(0.0,0.001)	
    }
  
  sd ~ dgamma(2, 2)
  
}